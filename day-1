JAVA
============
-> programming language
-> it is used to create a webapplication,desktop application,Mobile appliacation
example:
BASIC,FORTRAN,C,C++,JAVA,RUBY,PEARL,PYTHON,..


C/C++
================
-> it is a platform dependent.(itunes-->ios)
-> it does not support muliple application at a time.(button phone)

JAVA MAIN FEATURES
================
-> it is platform independent(Windows,linex,mac,etc,..)
-> it is an open source(no need to pay for licence)
-> it is simple progrming language(syntax)
-> it is easy to run and debug --(line by line execution)(bytecode ----> machinecode(0,1))
-> it does multithreading(thread-->process)
Muliple process
browse -->hear audio
it is portable(JVM)
WORA -- write Once Run Anywhere
it is more secure

  Encrypt   Decrypt

  Hello -------->dfghj--------------->Hello

JDK
  ===========
  -> JAVA DEVELOPMENT KIT
  -> JDK=JRE+JVM

JRE
  ========
  -> JAVA RUNTIME ENVIRONMENT
  -> It is contain predefined file and libraries
  37+21=58

  Installation
  ===============
  How to install JDK:
    1) GO to google------>type jdk 1.11 download------->Click the first link
    2) www.oracle.com-----------> Java SE development Kit 11.0.21
    3) check for os type and system processor type
    4) click the link which suits for your system---->jdk-11.0.21_window-x64_bin
    5) click Download----->it will reducing to a page for Account creation
    6) create Account ----> you will get a email for validation.
    7) Start downloading the file.
    8) install in your System.
      

    IDE
    =======
    Integrated development environment

    eclips------> Opensource (95% industrial Usage)
    RAD -----> IBM
    jDeveloper ---> oracle.

    How to install Eclips
    ===================================
    1) go to Google-------------->Eclips download
    2) www.eclipse.com
    3) Choose----------->Install your favorite desktop IDE packages-> Download packages
    4) Choose -->Eclipse IDE for Eclipse Committers
    5) check for os type and processor type
    6) click the link ---->Download in the form of ZIP file 
    7) rid=ght click on your ZIP file ----------->
    8) Extract the file And application file
    9) Install

    JDK--a Kit provides the environment to develop and execute(run) java program
    jre--provide an environment to run code
    jvm--responsible for executing the java program line by line

    OOPS
      ===========
      -> oops stands for Object Orinented Programming Structure.
      -> it is a method of implementation in which is organized as collection of class method and object

      Inhertiancr
      polymorphism
      Abstraction
      Encapsulation

      
      Create --> Class,Method and Object

    How to write a program
      =================
      ->Project---->package----->Class---->method---->Object

    Coding Stands or Stands Notation
      ================================
      1. Pascal Notation
      ================================
      Each word's first letter should be in capital.

      where to use :- ProjectName,ClassName.

      eg.ZohoCorporation

      2. Camel Notation
      ==============================
      First word's first letter should be in small and remaining each word's first letter should be in capital.

     Where to use :- methodName,VariableName,objectName.

eg.ZohoCorporation

Project
==============
Eclipse--->File-->New----->Project------->Java Project----->ProjectName(PascalNotation)-->finish

Package
===============
Project-------->src(R)---->new-------->Package------->com.tcs[TCS Company]org.cts[Organization]
com ->Company
org ->Organization

class
================
Package(R)---->New----->Class----->ClassName(PascalNotation)-->Finish

Method
==========
1.Type the method name and then press ctrl+space bar [private method]
2.press ctrl+space bar,select the required method from the displayed options.

To Run a Program
==================
---->Right Click-------->Run as------> Java Application

Main Method 
========================
Type main and then press ctrl+space bar --->Select main mrthod from the option.

Data Types:
===============
it Specifies about size and type of a variable.

Syntax:
=============
datatype variablename=value;
int a=10;

Variable:
================== 
It is used to store the value , Name of 


age -------->variableName
20 --------> Value
= ------------> assesment operator

note: assign right side value to left side value

Datatypes         Size        WeapperClass        DefaultValue             Ranges
==================================================================================================================
byte              1            Byte               0                         (-128 to 127)
short             2            Short              0                         (max 4)
int               4            Integer            0                         (max 9)
long              8            Long               0                         (max )
float             4            Float              0.0                        (-128 to 127)
double            8            Double             0.0                        (-128 to 127)
char('a')         1            Byte               0                         (-128 to 127)
Strings('name')
boolean(true/false)


byte,short,int,long------------>numbers without decinal value(eg 100,200,300)
float,double-------------->number with decimal value(eg 100,123,563,899965)



Range Calculation Formula
=============================
1 byte = 8 bits
2 byte = 16 bits
4 byte = 32 bits
8 byte = 64 bits



    -(2^n-1) to ((2^n-1)-1)
        nano of bits

for 4 bytes i.e :- 32bits`
 -(2^n-1) to ((2^n-1)-1)
 -(2^32-1) to ((2^32-1)-1)
 -2^31 to ((2^31-1)-1)
 -2147483648  to  2147483648-1
 -2147483648  to  2147483647


2^2^2^2^2^2^2^2 = 2^8

1.String :
 -> Collection of character or word enclosed with double qution is called String.
 -> String is pre defined Class.
 -> It is presented in java.lang package.
 -> It is based on index -> (0 to n-1);

Syntax
=================
String refName = "Value;
String  s = "Java";
             0123

Example
=========================
String refName = "Java" ; length = 4 index = 0 to n-1 => n=no of the character/length of the string

String s = "Java";

2.String Method
============================
length();
charAt();
startsWith();
endsWith();
toUpperCase();
toLowerCase();
indexOf();
lastIndexOf();
replace();
replaceAll();
subString(startindex)
subString(startindex,endindex);
isEmpty();
Contains();
equals();
equalsIgnoreCase();
conCat();
trim();



String Types
=======================
Literal String
Non literal String

Literal String
========================
String s1="welcome"
String s2="welcome"
Incase of the duplicate, it will share the memory.
it is stored inside string constant

Non Literal String
==========================
Incase of the duplicate in the string pool/ String constant but share some memory content


program
=====================
s1="Java";
s2="Java";
s3="Sql";

sop(System.identHasCOde(s1));
sop(System.identHasCOde(s2));
sop(System.identHasCOde(s3));

sop("non-literal string");
s4="Java";
s5="Java";
s6="Sql";

sop(System.identHasCOde(s4));
sop(System.identHasCOde(s5));
sop(System.identHasCOde(s6));

=================================

Immutable
Mutable

Immutable
======================
Same as the literal String
String s = "Welcome";
we use concat method.
It is stored inside the string pool or String Constant
While join or any action immutable String,it will not share any one of the String memory location

Mutable
=====================
Same as non literal string but use StringBuffer or StringBuilder
StringBuffer s = new StringBuffer("Welcome");
StringBuilder s = new StringBuilder("Welcome");


It is Stored in Heep Location 
We can use append method
during concationation it will not take new memory
While join or any action on StringBuffer or StringBuilder, it will share anyone String memory location


StringBuffer
=====================
Synchonous ----> sequential
Threadsafe
slow

StringBuilder
======================
Asynchronous ------> Non Sequential
Non Thead safe
fast


Non Linear String         Mutable String               Heap Memory
StringBuffer's =new StringBuffer();
s1="Java";---->43270           in case using the append method it will share the same memory address
s2="Java";------>35829
s3="Sql";--->67829
s4=s2.append(s3);
s4="JavaSql"---->35829;


Linear String         Immutable String               String Pool/String Constant

s="java";
s1="java":






program
==========================
sop("Immutable String");
s1="Java";
s2="Java";
s3="Sql";
s4=s2.concat(s3);

sop(System.identHasCOde(s1));
sop(System.identHasCOde(s2));
sop(System.identHasCOde(s3));
sop(s4);
sop(System.identHasCOde(s4));

sop();
sop("Mutable String");
StringBuffer s5=new StringBuffer("Java");
StringBuffer s6=new StringBuffer("Java");
StringBuffer s7=new StringBuffer("Sql");
StringBuffer s8=s6.append(s7);

sop(System.identHasCOde(s5));
sop(System.identHasCOde(s6));
sop(System.identHasCOde(s7));
sop(s8);
sop(System.identHasCOde(s8));
=================================

output
================
Immutable
47465244
47465244
932583850
JavaSql
212628335

Mutable
212628335
359023572
305808283
JavaSql
305808283
======================

Disadvantage of array:
===================================================
1.Memory wastage very high (Memory is allowed at compile time)
2.It only support similar data types

Collection :Interface
==========================
It is an predefined Interface under java.util.package
1.Storing multiplre values of disSimilar dataType in a single refName
2.Memory wastage is low due to memory is allocated at run time.

List:I
========================
List is predefined interface which is present in java.util.package
List is an index based
List allows duplication
List prints in Insertion order

Types of List (OR) Classes of List:
==================================
1.ArrayList
2.LinkedList
3.Vector


Method in List
======================
add();
Size();
get(index);
add(index, Value);
remove(index);
set(index,Value);
indexOf(Value);
lastIndexOf(Value);
contains(Value);

addAll();
retainAll();
removeAll();

========================================================================================
public static void main(String [] aegs){
List li = new ArrayList();
li.add(100);
li.add("Cyber");
li.add(false);
li.add('f');
li.add(45.78f);
li.add(100);
sop(li);
int Size = li.Size();
Sop(Size);
object ob = li.get(2);
SOP(ob);
}
=================================================================================================

public static void main(String [] aegs){
List<Integer> li  = new ArrayList();
li.add(100);
li.add(200);
li.add(300);
li.add(400);
li.add(500);
li.add(100);
sop(li);
int Size = li.Size();
Sop(Size);
Integer integer = li.get(2);
SOP(integer);
li.add(3, 350);
SOP(li);
li.add(3, 700);
SOP(li);
li.remove(3);
SOP(li);
int indexOf = li.indexOf(100);
SOP(indexOf);
int lastIndexOf = li.lastIndexOf(100);
SOP(lastIndexOf);
boolean contains = li.contains(700);
SOP(contains);
}
============================================================================

public static void main(String [] aegs){
List<Integer> li  = new ArrayList();
li.add(100);
li.add(200);
li.add(300);
li.add(400);
li.add(500);
li.add(100);          
SOP(li);
List<Integer> l = new ArrayList<Integer>();
l.add(10);
l.add(20);
SOP(l);
l.addAll(li);
SOP(l);
l.removeAll(li);
SOP(l);
l.retainAll(li);'
SOP(l);
SOP("Top iterate and fetch the value using For loop");
for(int i=0;i<li.size();i++){
SOP(li.get(l)); 
}
SOP();
SOP("To iterate and fetch the value based on enhanced For loop");
for(Integer b :li){
SOP(b);
}
}
----------
Output
------------
[100,200,300,400,500,100]
[10,20]
[10,20,100,200,300,400,500,100]
[100,200,300,400,500,100]
Top iterate and fetch the value using For loop
100
200
300
400
500
100

To iterate and fetch the value based on enhanced For loop
100
200
300
400
500
100
=========================================================================================


set:I
================
Set is the predefined interface which is present int java.util package
Set is value based one
Set doesn't allow duplicate Values
Order of set is based on class which we implement

Types of set (or) Classes of Set
===============================
HashSet-m--random
LinkedHashSet-----insertion
TreeSet----ascending order

Generics:
==========================
Support only similar datatypes
jdk 1.5 Version
< >-------Generics------->inside the generics we need to pass only wrapper Class

=================================================================================================================
public static void main(String [] aegs){
Set<Integer> s = new LinkedHashSet();
s.add(10);
s.add(20);
s.add(30);
s.add(40);
s.add(50);
SOP(s);
int size = s.size();
SOP(size);
s.remove(40);
SOP(s);
s.clear();
SOP(s);
for(Integer a:s){
SOP(a);
}
}
-------------------
Output
------------
[10,20,30,40,50]
5
[10,20,30,50]
10
20
30
50

==============================================
public static void main(String [] aegs){
List<Integer> s = new ArrayList<Integer>();
s.add(10);
s.add(20);
s.add(30);
s.add(40);
s.add(50);
s.add(10);
s.add(30);
SOP(s);
Set<Integer> l = new LinkHashSet();
l.addAll(s);
SOP(l);
}

================================

Inheritance:
==================
we can access one class property from another class.
by using extends keyword

why?:
============
to reduce memory westage.
reusable code purpose.

Types of inheritance:
======================
Single inheritance
Multiple inheritance
Multilevel inheritance
Hierarchial inheritance
Hybrid inheritance

Single inheritance:
==================================
combination of one parent one child class

Multiple inheritance:
====================
more than one parent class will acess one child parallel at a time
multiple inheritance cannot be achieved through java Class.

Because 
1)Syntax error
2)Priority issue

interface ---------> Through interface concept we can do multiple inheritance

Mutilevel inheritance:
=========================
more than one parent will acess one chils in a tree like structure

Hierarchical inheritance:
=========================
Combination of more than one child and one parent.

Hybrid inheritance:
======================
Combination of multiple chilid 


Program
============================
public class EmployeeDetails{
public void empName(){
sop("Employee Name is R");
}
public void empId(){
sop("Employee Id id E1");
}
}
===========================
public class CompanyDetails extands EmployeeDetails{
private void companyName(){
sop("Company Name is Zoho");
}
private void companylocation(){
sop("Company loc is karur");
}
public static void main(String [] args){
Company detais c = new Company details ();
c.companyName();
c.CompanyLocation();
c.empName();
c.empId();
}
}
-------------------------------------------------------------------------------
============================
public class ClientDetails{
public void ClientName(){
sop("Client Name is ford");
=========================
public class EmployeeDetails extands ClientDetails{
private void empName(){
sop("Employee Name is Rahul");
}
private void empId(){
sop("Employee Id is E1");
}
=================================
public class CompanyDetails extands EmployeeDetails{
private void companyName(){
sop("Company Name is Zoho");
}
private void companylocation(){
sop("Company loc is karur");
}
public static void main(String [] args){
CompanyDetais c = new CompanyDetails ();
c.CompanyName();
c.CompanyLocation();
c.empName();
c.empId();
c.clientName();
}
}
===============================================
--------------------------------------------------------------------------------

Single inheritance
------------------------------------
|  Parent Class                    |
------------------------------------
           |
           |
------------------------------------
|  Child Class                    |
------------------------------------

Multiple inheritance
------------------------------------              ------------------------------------
|  Parent Class  A                  | ------------ |  Parent Class  B                 |
------------------------------------              ------------------------------------
           |                |-----------------------------------------|
           |                |
------------------------------------
|  Child Class                    |
------------------------------------

Multilevel inheritance

------------------------------------
| Grant Parent Class               |    
------------------------------------
           |
           |
------------------------------------
|  Parent Class                    |
------------------------------------
           |
           |
------------------------------------
|  Child Class                    |
------------------------------------

Hierarchial inheritance

------------------------------------
| Grant Parent Class               |    
------------------------------------
           |
           |
------------------------------------              ------------------------------------               ------------------------------------
|  Parent Class  A                  | ------------ |  Parent Class  B                 |--------------   Parent Class  B                 |
------------------------------------              ------------------------------------                ------------------------------------


================================================================================================


Polymorphism
=====================
Executing methods in more than one forms or taking more than one forms or computing one task in different ways.

poly-------many
morphism------forms

Types of Polymorphism:
===============================
Method overloading (compile time polymorphism / ststic binding / static polymorphism)
--------------------------------------------------------------------------------------
with the same method you will create multiple methods and the methods differ based on the argument and the argument are different datatype,datatype count and datatype order

same class
same method name
diff parameter/argument

the argument depends on dataType
the argument depends on dataType number or count
the argument depends on dataType order

Method overriding(runTime polymorphism / dynamic binding/ Dynamic polymorphism)
--------------------------------------------------------------------------------
Whenever you are not satisfied with the business logic of your parent class method, you will create the same method with same argument in the child class and when you create the object reference and the call method , the child class method will get the preference. so you are overiding the parent class method with the child class method.

same method name
same argument / parameter
diff class

Program
===============================================
public class client{
private void clientdetails(int age){
sop("Client age is"+ age);
}
private void clientdetails(String Name){
sop("Client Name is"+ Name);
}
private void clientdetails(int id, String designation){
sop("Client id is"+ Id);
sop("Client desination is"+ designation);
}
private void clientdetails(String location,id pincode){
sop("Client location is"+ location);
sop("Client pincode is"+ pincode);
}
public static void main (String [] args){
Client c = new Client();
c.clientDetails(27);
c.clientDetails("Raghul");
c.clientDetails(100,"Engineering");
c.clientDetails("Coimbature",60042);
}
======================================================
-------------------------------------------------------------------------------------------------------------------------------------------
public class Reservbank{
public void savingAccount(int interest){
sop("Intrest rate of SA is 8%");
}
public void CurrentAccount(int interest){
sop("Intrest rate of CA is 6%");
}
}
=================================================================
public class UnionBank extands ReservBank{
private void savingAccount(int interest){
sop("Intrest rate of SA is "+ intrest +"%");
super.savingAccount(8);
}
private void fixedDeposit(){
sop("Intrest rate of FD is 5%");
}
public static void main(String [] args){
UnionBank bank = new UnionBank();
bank.savingAccount(7);
bank.CurrentAccount();
bank.fixedDeposit();
}
=====================================================================

Abstraction
======================
Hiding  the implementation details or business logic details

Types of abstraction:
=============================
partial abstraction / Absrtact Class
Fully abstraction / interface

partial abstraction(abstract class):
=========================================
contain both abstraction and non abstract methods
we can't create object
contain keywords extends

Fully abstraction(Interface):
=====================================
contain only the abstract methods
we can't create object
contain keywords implements 

Abstract Method:
====================
The method which contains only template[does not contain any logic] is called abstract method or method signature

Non abstract Method:
==========================
Method which contain logic is called non abstract method
--------------------------------------------------------------------------------------------------------------------------------------------------
program
===============================
public abstract class EmployeeDetails {
abstract void empName();
public void empId(){
sop("EMployee Id is E77");
}
}
=====================================================
public class CompanyDetails extands Employee{
void empName {
sop("Employee Name is");
}
private void companyName(){
sop("Company name is ");
}
public static void main(String [] args){
CompanyDetails cd = new CompanyDetails();
cd.empName();
cd.empId();
cd.CompanyName();
}
}
====================================================
-------------------------------------------------------------------------------------------------------------------------------------------------------------

public interface StudentDetails{
void studentName();
void StudentDept();
}
======================================
public class CollegeDetails extands StudentDetails{
private void StudentName(){
sop("Student Name is Vijay");
}
private void StudentSept(){
sop("Student Dept is Cyber");
}
private void CollegeName(){
sop("College Name is MKCE");
}
public static void main(String [] args){
CollegeDetais c = new CollegeDetails ();
c.StudentName();
c.StudentDept();
c.CollegeName();
}
}
==============================================

